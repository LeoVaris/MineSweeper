{"version":3,"sources":["MineSweeper/Node/Node.js","MineSweeper/AI/generalFunctions.js","MineSweeper/AI/main.js","MineSweeper/Grid.js","MineSweeper/Game.js","App.js","index.js"],"names":["Node","this","props","row","col","bombsAround","isHidden","isBomb","isFlag","onClick","onContextMenu","gameWon","extraClassName","gameLost","className","e","Component","checkLinks","grid","y","length","x","linked","links","clearLinks","flagsAround","hiddenSquares","filter","node","temp","neighbors","forEach","push","setLinks","risk","hiddenAround","i","numLinked","adjLinks","closeLinks","every","includes","m","l","rows","cols","AIMove","mineCount","firstClick","Math","floor","left","arr","nodes","gridToArray","hidden","toCheck","simpleBombUpdate","simpleSafeUpdate","safes","bombs","hiddenNoFlags","newRisk","max","complicatedRiskUpdate","rest","sort","a","b","sortByRisk","lowRisk","ret1","concat","Grid","_isMounted","handleContextMenu","undefined","preventDefault","newGrid","RightClick","state","setState","flags","Flags","sendMineCountCallback","playAI","aiSpeed","alive","hasWon","setTimeout","handleOnClick","grid_width","width","grid_height","height","loading","time","CreateGrid","stopTimer","parentCallback","from","data","minesLeft","timer","setInterval","clearInterval","FirstClick","resetTimer","startTimer","isAlive","LeftClick","sendLossCallback","HiddenSquares","sendWinCallback","map","rowIndex","key","nodeIndex","CreateMines","UpdateMineCount","rowArr","CreateNode","isClear","slice","newNode","BombFound","ClearSquare","getNeighbors","getNewGridWithMine","isMine","startNode","minesPut","safeSpace","pos","RandomPos","abs","random","CountNeighbors","count","Game","Callback","hasLost","handleOptionChange","option","target","value","handleCustomGame","index","newData","customData","parseInt","changeAISpeed","Restart","handleNewGame","atr","isNaN","Verifybomb","type","name","autoComplete","min","onChange","onSubmit","ButtonClassName","checked","customInput","step","defaultValue","winText","LossText","handleClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c061ecf.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n\n  render() {\n\n    const {\n      row,\n      col,\n      bombsAround,\n      isHidden,\n      isBomb,\n      isFlag,\n      onClick,\n      onContextMenu,\n      gameWon,\n      gameLost,\n    } = this.props;\n\n    let extraClassName = ''\n    // Determines whats shown to user (Different according to gamestate)\n    if (gameLost) {\n      if (isFlag && !isBomb) extraClassName = 'Node-wrongflag'\n      else if (isFlag) extraClassName = 'Node-flag'\n      else if (isBomb && !isHidden) extraClassName = 'Node-bombhit'\n      else if (isBomb) extraClassName = 'Node-bomb'\n      else if (isHidden) extraClassName = 'Node-hidden'\n      else extraClassName = `Node-${bombsAround}`\n    }\n    else if (gameWon) {\n      if (isFlag) extraClassName = 'Node-flag'\n      else if (isBomb) extraClassName = 'Node-bomb'\n      else if (isHidden) extraClassName = 'Node-flag'\n      else extraClassName = `Node-${bombsAround}`\n    }\n    else {\n      if (isFlag) extraClassName = 'Node-flag'\n      else if (isHidden) extraClassName = 'Node-hidden'\n      else if (isBomb) extraClassName = 'Node-bombhit'\n      else extraClassName = `Node-${bombsAround}`\n    }\n    return ( \n      <div \n        className={`Node ${extraClassName}`}\n        onClick={() => onClick(row, col)}\n        onContextMenu={(e) => onContextMenu(e, row, col)}\n      ></div>\n    )\n  }\n}","\n// If there's same amount of flags than\n// bombs then the others are clear\nexport function simpleSafeUpdate(grid, row, col) {\n  const node = grid[row][col];\n  const bombsAround = node.bombsAround;\n  if (bombsAround === flagsAround(grid, row, col).length) {\n    const nb = hiddenSquares(grid, row, col);\n    nb.forEach(node => node.risk = 0);\n  }\n}\n\n// If same amount of hiddensquares than \n// bombs then all hidden are bombs\nexport function simpleBombUpdate(grid, row, col) {\n  const node = grid[row][col];\n  const bombsAround = node.bombsAround;\n  if (bombsAround === hiddenSquares(grid, row, col).length) {\n    const nb = hiddenSquares(grid, row, col);\n    nb.forEach(node => node.risk = 100);\n  }\n}\n\n// Calculates the % that this node is bombå\nexport function complicatedRiskUpdate(grid, row, col) {\n  const node = grid[row][col];\n  if (node.risk === 0 || node.risk === 100) return;\n  const hiddenNoFlags = hiddenSquares(grid, row, col).filter(node => !node.isFlag);\n  const bombsNotFound = node.bombsAround - flagsAround(grid, row, col).length;\n  const risk = bombsNotFound / hiddenNoFlags.length;\n  hiddenNoFlags.forEach(node => {\n    const newRisk = Math.max(risk, node.risk);\n    node.risk = newRisk;\n  })\n}\n\n// Resets all link data\nfunction clearLinks(grid) {\n  for (let y = 0; y < grid.length; y++) {\n    for (let x = 0; x < grid[0].length; x++) {\n      grid[y][x].linked = false;\n      grid[y][x].links = [];\n    }\n  }\n}\n\n// Generates the links \nfunction setLinks(grid) {\n  clearLinks(grid);\n  for (let y = 0; y < grid.length; y++) {\n    for (let x = 0; x < grid[0].length; x++) {\n      if (grid[y][x].bombsAround - flagsAround(grid, y, x) === 1 && hiddenSquares(grid, y, x).filter(node => \n        !node.isFlag).length !== 1 && !grid[y][x].isHidden && !grid[y][x].isFlag) { \n\n        const temp = [];\n        const neighbors = hiddenSquares(grid, y, x).filter(node => !node.isFlag);\n        neighbors.forEach(node => temp.push(node));\n        neighbors.forEach(node => {\n          const {row, col} = node;\n          if (grid[row][col].links.length >= temp.length || !grid[row][col].linked) {\n            grid[row][col].linked = true;\n            grid[row][col].links = [...temp];\n          }\n        })\n      }\n    }\n  }\n}\n\n// Checks the links so we can solve more challenging positions\nexport function checkLinks(grid) {\n  setLinks(grid);\n  for (let y = 0; y < grid.length; y++) {\n    for (let x = 0; x < grid[0].length; x++) {\n      if (!grid[y][x].isHidden && !grid[y][x].isFlag && grid[y][x].risk !== 100 && grid[y][x].risk !== 0) {\n        \n        const node = grid[y][x];\n        const hiddenAround = hiddenSquares(grid, y, x).filter(node => !node.isFlag);\n        if (node.bombsAround > 1 && node.bombsAround - flagsAround(grid, node.row, node.col) > 1) {\n          \n          for (let i = 0; i < hiddenAround.length; i++) {\n            if (hiddenAround[i].linked) {\n              \n              let numLinked = 0;\n              const adjLinks = [];\n              if (hiddenAround[i].links.length === hiddenAround.length - 1) {\n                \n                const closeLinks = [];\n                if (hiddenAround[i].links.every(node => {\n                  closeLinks.push(node);\n                  return (hiddenAround.includes(node));\n                })) {\n                  for (let m = 0; m < hiddenAround.length; m++) {\n                    if (!closeLinks.includes(hiddenAround[m])) {\n                      const {row, col} = hiddenAround[m];\n                      grid[row][col].risk = 0;\n                      break;\n                    }\n                  }\n                }\n              }\n              for (let l = 0; l < hiddenAround[i].links.length; l++) {\n\n                if (hiddenAround.includes(hiddenAround[i].links[l])) {\n                  \n                  numLinked++;\n                  adjLinks.push(hiddenAround[i].links[l]);\n                }\n              }\n              if (numLinked > 1) {\n                \n                if (hiddenAround.length - (numLinked - 1) === node.bombsAround) {\n                  \n                  for (let m = 0; m < hiddenAround.length; m++) {\n                    if (!adjLinks.includes(hiddenAround[m])) {\n                      const {row, col} = hiddenAround[m];\n                      grid[row][col].risk = 100;\n                    } \n                  }\n                  return;\n                }\n              }\n            }\n          }\n        } \n      }\n    }\n  }\n}\n\n// Returns flags around\nexport function flagsAround(grid, row, col) {\n  return (neighbors(grid, row, col).filter(node => node.isFlag));\n}\n\n// Returns hidden squares around\nexport function hiddenSquares(grid, row, col) {\n  return (neighbors(grid, row, col).filter(node => node.isHidden));\n}\n\n// returns all neighborsw\nexport function neighbors(grid, row, col) {\n  const neighbors = [];\n  const rows = grid.length-1;\n  const cols = grid[0].length-1;\n  // Top row\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row > 0 && col < cols) neighbors.push(grid[row - 1][col + 1]);\n  // Middle\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < cols) neighbors.push(grid[row][col + 1]);\n  // Bottom row\n  if (row < rows && col > 0) neighbors.push(grid[row + 1][col - 1]);\n  if (row < rows) neighbors.push(grid[row + 1][col]);\n  if (row < rows && col < cols) neighbors.push(grid[row + 1][col + 1]);\n\n  return neighbors;\n}\n\n// 2d grid to 1d array\nexport function gridToArray(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n","\nimport {simpleBombUpdate, simpleSafeUpdate, checkLinks,\n  gridToArray, complicatedRiskUpdate, hiddenSquares} from './generalFunctions';\n\n\nexport default function AIMove(grid, mineCount, firstClick) {\n  // Just guess the first click\n  if (firstClick) {\n    const row = Math.floor(grid.length / 2)\n    const col = Math.floor(grid[0].length / 2)\n    return ({row, col, left: true});\n  }\n  // Converts grid to 1d array\n  const arr = gridToArray(grid);\n  const hidden = arr.filter(node => node.isHidden && !node.isFlag);\n  const toCheck = arr.filter(node => \n    !node.isHidden && \n    !node.isFlag &&\n    node.bombsAround > 0\n  );\n  // Check links \n  checkLinks(grid);\n  // Check simple logics\n  toCheck.forEach(node => {\n    const row = node.row;\n    const col = node.col;\n    simpleBombUpdate(grid, row, col);\n    simpleSafeUpdate(grid, row, col);\n  })\n  // Safe squares\n  const safes = hidden.filter(node => node.risk === 0);\n  if (safes.length > 0) return ({row: safes[0].row, col: safes[0].col, left: true});\n  // Bombs\n  const bombs = hidden.filter(node => node.risk === 100);\n  if (bombs.length > 0) return ({row: bombs[0].row, col: bombs[0].col, left: false});\n  // If there's no certain bombs or safespaces do guessing\n  toCheck.forEach(node => {\n    // Do the risk calculation for these nodes\n    complicatedRiskUpdate(grid, node.row, node.col);\n  })\n  // Array of nodes that have their risk calculated\n  let rest = hidden.filter(node => node.risk !== null);\n  rest = sortByRisk(rest);\n  // if theres filtered options\n  if (typeof rest[0] !== 'undefined') {\n    return ({row: rest[0].row, col: rest[0].col, left: true});\n  }\n  // Basicly a pure guess \n  const lowRisk = toCheck.filter(node => node.bombsAround === 1);\n  let ret1 = [];\n  lowRisk.forEach(node => {\n    ret1 = ret1.concat(hiddenSquares(grid, node.row, node.col).filter(node => !node.isFlag));\n  })\n  if (ret1.length > 0) {\n    return ({row: ret1[0].row, col: ret1[0].col, left: true});\n  }\n  return ({row: hidden[0].row, col: hidden[0].col, left: true});\n}\n\nfunction sortByRisk(arr) {\n  return (arr.sort((a, b) => a.risk - b.risk));\n}\n","import React, { Component } from 'react';\n\nimport './Game.css';\n\nimport Node from './Node/Node';\nimport AIMove from './AI/main';\n\n\nexport default class Grid extends Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      grid_width: this.props.width,\n      grid_height: this.props.height,\n      loading: true,\n      firstClick: true,\n      mineCount: this.props.mineCount,\n      alive: true,\n      hasWon: false,\n      time: 0,\n      aiSpeed: this.props.aiSpeed,\n    }\n  }\n\n  // initializes grid after loading\n  componentDidMount() {\n    const {grid_width, grid_height} = this.state;\n    const grid = CreateGrid(grid_width, grid_height);\n    this.setState({grid, loading: false});\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this.stopTimer();\n    this._isMounted = false;\n  }\n\n  // Send data to game component\n  sendWinCallback() {\n    this.setState({hasWon: true});\n    const data = {\n      from: 'grid-win',\n    };\n    this.props.parentCallback(data);\n  }\n\n  sendMineCountCallback(flags) {\n    const minesLeft = this.state.mineCount - flags;\n    const data = {\n      from: 'grid-minecount',\n      minesLeft: minesLeft,\n    }\n    this.props.parentCallback(data);\n  }\n\n  sendLossCallback() {\n    const data = {\n      from: 'grid-loss',\n    }\n    this.props.parentCallback(data);\n  }\n\n  // Timer functions\n  startTimer() {\n    this.timer = setInterval(() => this.setState({\n      time: this.state.time + 1\n    }), 1000);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n  }\n\n  resetTimer() {\n    this.setState({time: 0});\n  }\n\n  // Handles left click\n  handleOnClick(row, col) {\n    const {firstClick, grid, mineCount, alive} = this.state;\n    if (!alive) return;\n    if (!this._isMounted) return;\n    if (firstClick) {\n      const newGrid = FirstClick(grid, row, col, mineCount);\n      this.resetTimer();\n      this.startTimer();\n      this.setState({grid: newGrid, firstClick: false});\n    } else {\n      let newGrid = grid;\n      const isAlive = LeftClick(newGrid, row, col);\n      if (!isAlive) {\n        this.stopTimer();\n        this.sendLossCallback();\n      }\n      this.setState({grid: newGrid, alive: isAlive});\n    }\n    if (HiddenSquares(grid) === 0) {\n      this.sendWinCallback();\n      this.stopTimer();\n    }\n  }\n\n  // handleRight click\n  handleContextMenu = (e, row, col) => {\n    if (!this._isMounted) return;\n    if (e !== undefined) e.preventDefault();\n\n    const newGrid = RightClick(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n    const flags = Flags(this.state.grid);\n    this.sendMineCountCallback(flags);\n  }\n\n  // Starts the ai\n  playAI = () => {\n    const {aiSpeed, alive, hasWon} = this.state;\n    if (!this._isMounted || !alive || hasWon) return;\n    setTimeout(() => {\n      const {grid, mineCount, firstClick} = this.state;\n      const {row, col, left} = AIMove(grid, mineCount, firstClick);\n      if (left) this.handleOnClick(row, col);\n      else this.handleContextMenu(undefined, row, col);\n      let {alive, hasWon} = this.state;\n      if (alive && !hasWon) this.playAI();\n    }, aiSpeed);\n  }\n\n  render() {\n    const {grid, loading, time, mineCount, hasWon, alive} = this.state;\n    if (loading) {\n      return (\n        'Loading...'\n      );\n    }\n    return (\n      <>\n      {/* Button to start the AI*/}\n      <div className=\"aibtn\">\n        <button className=\"newgame\" onClick={() => this.playAI()}>\n          Play AI\n        </button>\n      </div>\n      {/* Info to the user */}\n      <div className=\"timer\" >\n        Mines left: {mineCount - Flags(grid)}<br/> Time: {time}\n      </div>\n      <div className=\"grid\">\n        {/*Renders every node component */}\n      {grid.map((row, rowIndex) => {\n        return (\n          <div key={rowIndex}>\n            {row.map((node, nodeIndex) => {\n              const {row, col, bombsAround, isHidden, isFlag, isBomb} = node;\n              return (\n                <Node \n                  key={nodeIndex}\n                  col={col}\n                  row={row}\n                  bombsAround={bombsAround}\n                  isHidden={isHidden}\n                  isBomb={isBomb}\n                  isFlag={isFlag}\n                  gameWon={hasWon} \n                  gameLost={!alive}\n                  onContextMenu={(e, row, col) => this.handleContextMenu(e, row, col)}\n                  onClick={(row, col) => this.handleOnClick(row, col)}\n                ></Node>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n    </>\n    );\n  }\n}\n// Generates bombs\nconst FirstClick = (grid, row, col, mineCount) => {\n  CreateMines(grid, mineCount, grid[row][col]);\n  UpdateMineCount(grid);\n  LeftClick(grid, row, col);\n  return (grid);\n}\n\n\nconst CreateGrid = (width, height) => {\n  let grid = []\n  for (let row = 0; row < height; row++) {\n    const rowArr = []\n    for (let col = 0; col < width; col++) {\n      rowArr.push(CreateNode(row, col));\n    }\n    grid.push(rowArr);\n  }\n  return (grid);\n};\n\nconst CreateNode = (row, col) => {\n  return ({\n    row,\n    col,\n    bombsAround: 0,\n    isHidden: true,\n    isBomb: false,\n    isFlag: false,\n    isClear: false,\n    linked: false,\n    risk: null,\n    links: [],\n  })\n};\n\n// toggles flags\nconst RightClick = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if (!node.isHidden) return grid;\n  const value = !node.isFlag;\n  const newNode = {\n    ...node,\n    isFlag: value,\n  }\n  newGrid[row][col] = newNode;\n  return newGrid;\n}\n\nconst LeftClick = (grid, row, col) => {\n  const node = grid[row][col];\n  if (node.isFlag) {\n    return true;\n  }\n  if (node.isBomb) {\n    BombFound(grid, row, col);\n    return false;\n  } else if (node.bombsAround !== 0 || !node.isHidden) {\n    ClearSquare(grid, row, col);\n  } else {\n    ClearSquare(grid, row, col);\n    let neighbors = getNeighbors(grid, row, col);\n    neighbors = neighbors.filter(node => node.isHidden && !node.isFlag);\n    neighbors.forEach(node => {\n      LeftClick(grid, node.row, node.col);\n    });\n  }\n  return true;\n}\n\nconst BombFound = (grid, row, col) => {\n  const node = grid[row][col];\n  const newNode = {\n    ...node,\n    isHidden: false,\n  }\n  grid[row][col] = newNode;\n}\n\nconst ClearSquare = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isHidden: false,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n}\n\nconst getNewGridWithMine = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isBomb: true,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n}\n\nconst isMine = (grid, row, col) => {\n  return (grid[row][col].isBomb);\n}\n\nconst CreateMines = (grid, mineCount, startNode) => {\n  let newGrid = grid;\n  let minesPut = 0;\n  let safeSpace = 2;\n  if (grid.length * grid[0].length - 9 < mineCount) safeSpace = 1;\n  while (minesPut < mineCount) { // inserts all mines\n    const pos = RandomPos(grid.length, grid[0].length);\n    if (isMine(newGrid, pos.row, pos.col)) continue;\n    if (Math.abs(startNode.row - pos.row) < safeSpace && Math.abs(startNode.col - pos.col) < safeSpace) continue;\n    newGrid = getNewGridWithMine(newGrid, pos.row, pos.col);\n    minesPut++;\n  }\n  return newGrid;\n}\n\nconst RandomPos = (rows, cols) => {\n  return ({\n    row: Math.floor(Math.random() * rows),\n    col: Math.floor(Math.random() * cols),\n  })\n}\n\nconst UpdateMineCount = (grid) => {\n  grid.forEach(row => {\n    row.forEach(node => {\n      node.bombsAround = CountNeighbors(grid, node.row, node.col);\n    })\n  });\n}\n\nconst Flags = (grid) => {\n  let count = 0;\n  grid.forEach(row => {\n    row.forEach(node => {\n      if (node.isFlag) count++;\n    })\n  })\n  return count;\n}\n\n// returns mines around\nconst CountNeighbors = (grid, row, col) => {\n  return getNeighbors(grid, row, col).filter(node => node.isBomb).length;\n}\n\nconst getNeighbors = (grid, row, col) => {\n  const neighbors = [];\n  const rows = grid.length-1;\n  const cols = grid[0].length-1;\n  // Top row\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row > 0 && col < cols) neighbors.push(grid[row - 1][col + 1]);\n  // Middle\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < cols) neighbors.push(grid[row][col + 1]);\n  // Bottom row\n  if (row < rows && col > 0) neighbors.push(grid[row + 1][col - 1]);\n  if (row < rows) neighbors.push(grid[row + 1][col]);\n  if (row < rows && col < cols) neighbors.push(grid[row + 1][col + 1]);\n\n  return neighbors;\n}\n\nconst HiddenSquares = (grid) => {\n  let count = 0;\n  for (let row = 0; row < grid.length; row++) {\n    for (let col = 0; col < grid[0].length; col++) {\n      if (grid[row][col].isHidden && !grid[row][col].isBomb) {\n        count++;\n      }\n    }\n  }\n  return count;\n}","import React, {Component} from 'react'\n\nimport Grid from './Grid'\n\nexport default class Game extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: true,\n      width: 9,\n      height: 9,\n      mineCount: 10,\n      key: 0,\n      hasWon: false,\n      hasLost: false,\n      option: \"beginner\",\n      minesLeft: 0,\n      customData: [],\n      aiSpeed: 500,\n    }\n  }\n\n  componentDidMount() {\n    // set data after loading\n    const {mineCount} = this.state\n    const customData = [9, 9, 10]\n    this.setState({loading: false, minesLeft: mineCount, customData: customData})\n  }\n\n  // Called when receiving data from grid\n  Callback = (data) => {\n    const {from} = data\n    if (from === 'grid-win') {\n      this.setState({hasWon: true})\n    } else if (from === 'grid-minecount') {\n      const {minesLeft} = data\n      this.setState({minesLeft: minesLeft})\n    } else if (from === 'grid-loss') {\n      this.setState({hasLost: true})\n    }\n  }\n\n  // Handles the gamemode selection\n  handleOptionChange = (e) => {\n    this.setState({option: e.target.value})\n  }\n\n  // inserts the data from the custom game options\n  handleCustomGame = (e, index) => {\n    const {customData} = this.state\n    const newData = customData\n    newData[index] = parseInt(e.target.value)\n    this.setState({customData: newData})\n  }\n\n  // Handler for changing the AI speed\n  changeAISpeed = (e) => {\n    e.preventDefault()\n    this.setState({aiSpeed: 1000 - e.target.value})\n    this.Restart()\n  }\n\n  // When new game is created\n  handleNewGame = (e) => {\n    e.preventDefault()\n    const {option, customData} = this.state\n    if (option === \"beginner\") {\n      this.setState({width: 9, height: 9, mineCount: 10, minesLeft: this.state.mineCount})\n    } else if (option === \"intermediate\") {\n      this.setState({width: 16, height: 16, mineCount:40, minesLeft: this.state.mineCount})\n    } else if (option === \"expert\") {\n      this.setState({width: 30, height: 16, mineCount: 99, minesLeft: this.state.mineCount})\n    } else if (option === \"custom\") {\n      if (customData.every(atr => !isNaN(atr))) {\n        const bombs = this.Verifybomb(customData)\n        this.setState({width: customData[0], height: customData[1], mineCount: bombs, minesLeft: this.state.mineCount})\n      } else return\n    }\n    this.Restart()\n  }\n\n  // Will verify that its possible to make this grid\n  Verifybomb(data) {\n    if (data[0] * data[1] < 2) return (0)\n    if (data[0] * data[1] - 1 >= data[2]) {\n      return (data[2])\n    } else {\n      return (data[0] * data[1] - 1)\n    }\n  }\n\n  // reset the game\n  Restart = () => {\n    let {key} = this.state\n    key++\n    this.setState({key: key, hasWon: false, hasLost: false, minesLeft: this.state.mineCount})\n  }\n\n  // Handles styles for the gamemodes\n  ButtonClassName(value) {\n    const {option} = this.state\n    if (option === value) {\n      return (\"regularbtn checked\")\n    } else {\n      return (\"regularbtn\")\n    }\n  }\n\n  customInput() {\n    if (this.state.option !== 'custom') {\n      return null\n    }\n\n    return (\n      <div className=\"regularbtn buttons\">\n        <label>\n          Width:&nbsp;&nbsp;\n          <input className=\"custom-input\" type=\"number\" name=\"width\" \n            autoComplete=\"off\" min={1} max={25} onChange={(e) => this.handleCustomGame(e, 0)}/>\n        </label>\n        <label>\n          <br/>Height:&nbsp;\n          <input className=\"custom-input\" type=\"number\" name=\"height\" \n            autoComplete=\"off\" min={1} max={25} onChange={(e) => this.handleCustomGame(e, 1)}/>\n        </label>\n        <label> \n          <br/>Bombs:\n          <input className=\"custom-input\" type=\"number\" name=\"bombs\" \n            autoComplete=\"off\" min={0} max={1000} onChange={(e) => this.handleCustomGame(e, 2)}/>\n        </label>\n      </div>\n    )\n  }\n\n  // text if game has been won\n  winText() {\n    if (this.state.hasWon)\n      return 'You Win!'\n  }\n\n  // text if game has been lost\n  LossText() {\n    if (this.state.hasLost) \n      return 'You Lost!'\n  }\n  \n  render() {\n    const {key, loading, option, width, height, mineCount, aiSpeed} = this.state\n    if (loading) {\n      return ('Loading...')\n    }\n    return (\n      <>\n      {/* all IO*/ }\n      \n      <div className=\"IO\">\n        <form onSubmit={this.handleNewGame}>\n          <div className=\"buttons\">\n            {/**gamemode selector */}\n            <label className={this.ButtonClassName(\"custom\")}>\n              <input type=\"radio\" value=\"custom\" checked={option === \"custom\"} onChange={this.handleOptionChange}/>\n              Custom\n            </label>\n            <label className={this.ButtonClassName(\"beginner\")}> Beginner\n              <input type=\"radio\" value=\"beginner\" checked={option === \"beginner\"} onChange={this.handleOptionChange}/>\n            </label>\n            <label className={this.ButtonClassName(\"intermediate\")}> Intermediate\n              <input type=\"radio\" value=\"intermediate\" checked={option === \"intermediate\"} onChange={this.handleOptionChange}/>\n            </label>\n            <label className={this.ButtonClassName(\"expert\")}>\n              <input type=\"radio\" value=\"expert\" checked={option === \"expert\"} onChange={this.handleOptionChange}/>\n              Expert&nbsp;<br/>\n            </label>\n          </div>\n          {/**custom input form */}\n          {this.customInput()}\n          <button className=\"newgame\" type=\"submit\">\n            New Game\n          </button>\n          <div className=\"ai\">\n            AI speed<br/>\n            <input className=\"slider\" type=\"range\" name=\"points\" min=\"100\" max=\"990\" step=\"10\" \n              defaultValue=\"550\" onChange={this.changeAISpeed}></input>\n          </div>\n          \n        </form>\n      </div>\n      {/**extra text for certain gamestates */}\n      <div className=\"win\">\n        {this.winText()}\n      </div>\n      <div className=\"loss\">\n        {this.LossText()}\n      </div>\n      {/**Renders the grid */}\n        <div key={key}>\n          <Grid\n            onContextMenu={this.handleClick}\n            parentCallback = {this.Callback}\n            width={width}\n            height={height}\n            mineCount={mineCount}\n            aiSpeed={aiSpeed}\n          ></Grid>\n        </div>\n      </>\n    )\n  }\n}\n","import React from 'react';\n\nimport Game from './MineSweeper/Game';\n\nfunction App() {\n  return (\n    <Game />\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}