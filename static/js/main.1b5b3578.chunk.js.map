{"version":3,"sources":["MineSweeper/Node/Node.js","MineSweeper/AI/generalFunctions.js","MineSweeper/AI/main.js","MineSweeper/Grid.js","MineSweeper/Game.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","row","col","bombsAround","isHidden","isBomb","isFlag","onClick","onContextMenu","gameWon","extraClassName","gameLost","className","e","Component","checkLinks","grid","y","length","x","linked","links","clearLinks","flagsAround","hiddenSquares","filter","node","temp","neighbors","forEach","push","setLinks","risk","hiddenAround","i","numLinked","adjLinks","closeLinks","every","includes","m","l","rows","cols","AIMove","mineCount","firstClick","Math","floor","left","arr","nodes","gridToArray","hidden","toCheck","simpleBombUpdate","simpleSafeUpdate","safes","bombs","hiddenNoFlags","newRisk","max","complicatedRiskUpdate","rest","sort","a","b","sortByRisk","lowRisk","ret1","concat","Grid","_isMounted","handleContextMenu","undefined","preventDefault","newGrid","RightClick","state","setState","flags","Flags","sendMineCountCallback","playAI","aiSpeed","alive","hasWon","setTimeout","handleOnClick","grid_width","width","grid_height","height","loading","time","CreateGrid","stopTimer","parentCallback","from","data","minesLeft","timer","setInterval","clearInterval","FirstClick","resetTimer","startTimer","isAlive","LeftClick","sendLossCallback","HiddenSquares","sendWinCallback","map","rowIndex","key","nodeIndex","CreateMines","UpdateMineCount","rowArr","CreateNode","isClear","slice","newNode","BombFound","ClearSquare","getNeighbors","getNewGridWithMine","isMine","startNode","minesPut","safeSpace","pos","RandomPos","abs","random","CountNeighbors","count","Game","Callback","hasLost","handleOptionChange","option","target","value","handleCustomGame","index","newData","customData","parseInt","changeAISpeed","Restart","handleNewGame","atr","isNaN","Verifybomb","onSubmit","ButtonClassName","type","checked","onChange","name","autoComplete","min","step","defaultValue","winText","LossText","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b5b3578.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n\r\n  render() {\r\n\r\n    const {\r\n      row,\r\n      col,\r\n      bombsAround,\r\n      isHidden,\r\n      isBomb,\r\n      isFlag,\r\n      onClick,\r\n      onContextMenu,\r\n      gameWon,\r\n      gameLost,\r\n    } = this.props;\r\n\r\n    let extraClassName = ''\r\n    // Determines whats shown to user (Different according to gamestate)\r\n    if (gameLost) {\r\n      if (isFlag && !isBomb) extraClassName = 'Node-wrongflag'\r\n      else if (isFlag) extraClassName = 'Node-flag'\r\n      else if (isBomb && !isHidden) extraClassName = 'Node-bombhit'\r\n      else if (isBomb) extraClassName = 'Node-bomb'\r\n      else if (isHidden) extraClassName = 'Node-hidden'\r\n      else extraClassName = `Node-${bombsAround}`\r\n    }\r\n    else if (gameWon) {\r\n      if (isFlag) extraClassName = 'Node-flag'\r\n      else if (isBomb) extraClassName = 'Node-bomb'\r\n      else if (isHidden) extraClassName = 'Node-flag'\r\n      else extraClassName = `Node-${bombsAround}`\r\n    }\r\n    else {\r\n      if (isFlag) extraClassName = 'Node-flag'\r\n      else if (isHidden) extraClassName = 'Node-hidden'\r\n      else if (isBomb) extraClassName = 'Node-bombhit'\r\n      else extraClassName = `Node-${bombsAround}`\r\n    }\r\n    return ( \r\n      <div \r\n        className={`Node ${extraClassName}`}\r\n        onClick={() => onClick(row, col)}\r\n        onContextMenu={(e) => onContextMenu(e, row, col)}\r\n      ></div>\r\n    )\r\n  }\r\n}","\r\n// If there's same amount of flags than\r\n// bombs then the others are clear\r\nexport function simpleSafeUpdate(grid, row, col) {\r\n  const node = grid[row][col];\r\n  const bombsAround = node.bombsAround;\r\n  if (bombsAround === flagsAround(grid, row, col).length) {\r\n    const nb = hiddenSquares(grid, row, col);\r\n    nb.forEach(node => node.risk = 0);\r\n  }\r\n}\r\n\r\n// If same amount of hiddensquares than \r\n// bombs then all hidden are bombs\r\nexport function simpleBombUpdate(grid, row, col) {\r\n  const node = grid[row][col];\r\n  const bombsAround = node.bombsAround;\r\n  if (bombsAround === hiddenSquares(grid, row, col).length) {\r\n    const nb = hiddenSquares(grid, row, col);\r\n    nb.forEach(node => node.risk = 100);\r\n  }\r\n}\r\n\r\n// Calculates the % that this node is bombå\r\nexport function complicatedRiskUpdate(grid, row, col) {\r\n  const node = grid[row][col];\r\n  if (node.risk === 0 || node.risk === 100) return;\r\n  const hiddenNoFlags = hiddenSquares(grid, row, col).filter(node => !node.isFlag);\r\n  const bombsNotFound = node.bombsAround - flagsAround(grid, row, col).length;\r\n  const risk = bombsNotFound / hiddenNoFlags.length;\r\n  hiddenNoFlags.forEach(node => {\r\n    const newRisk = Math.max(risk, node.risk);\r\n    node.risk = newRisk;\r\n  })\r\n}\r\n\r\n// Resets all link data\r\nfunction clearLinks(grid) {\r\n  for (let y = 0; y < grid.length; y++) {\r\n    for (let x = 0; x < grid[0].length; x++) {\r\n      grid[y][x].linked = false;\r\n      grid[y][x].links = [];\r\n    }\r\n  }\r\n}\r\n\r\n// Generates the links \r\nfunction setLinks(grid) {\r\n  clearLinks(grid);\r\n  for (let y = 0; y < grid.length; y++) {\r\n    for (let x = 0; x < grid[0].length; x++) {\r\n      if (grid[y][x].bombsAround - flagsAround(grid, y, x) === 1 && hiddenSquares(grid, y, x).filter(node => \r\n        !node.isFlag).length !== 1 && !grid[y][x].isHidden && !grid[y][x].isFlag) { \r\n\r\n        const temp = [];\r\n        const neighbors = hiddenSquares(grid, y, x).filter(node => !node.isFlag);\r\n        neighbors.forEach(node => temp.push(node));\r\n        neighbors.forEach(node => {\r\n          const {row, col} = node;\r\n          if (grid[row][col].links.length >= temp.length || !grid[row][col].linked) {\r\n            grid[row][col].linked = true;\r\n            grid[row][col].links = [...temp];\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Checks the links so we can solve more challenging positions\r\nexport function checkLinks(grid) {\r\n  setLinks(grid);\r\n  for (let y = 0; y < grid.length; y++) {\r\n    for (let x = 0; x < grid[0].length; x++) {\r\n      if (!grid[y][x].isHidden && !grid[y][x].isFlag && grid[y][x].risk !== 100 && grid[y][x].risk !== 0) {\r\n        \r\n        const node = grid[y][x];\r\n        const hiddenAround = hiddenSquares(grid, y, x).filter(node => !node.isFlag);\r\n        if (node.bombsAround > 1 && node.bombsAround - flagsAround(grid, node.row, node.col) > 1) {\r\n          \r\n          for (let i = 0; i < hiddenAround.length; i++) {\r\n            if (hiddenAround[i].linked) {\r\n              \r\n              let numLinked = 0;\r\n              const adjLinks = [];\r\n              if (hiddenAround[i].links.length === hiddenAround.length - 1) {\r\n                \r\n                const closeLinks = [];\r\n                if (hiddenAround[i].links.every(node => {\r\n                  closeLinks.push(node);\r\n                  return (hiddenAround.includes(node));\r\n                })) {\r\n                  for (let m = 0; m < hiddenAround.length; m++) {\r\n                    if (!closeLinks.includes(hiddenAround[m])) {\r\n                      const {row, col} = hiddenAround[m];\r\n                      grid[row][col].risk = 0;\r\n                      break;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              for (let l = 0; l < hiddenAround[i].links.length; l++) {\r\n\r\n                if (hiddenAround.includes(hiddenAround[i].links[l])) {\r\n                  \r\n                  numLinked++;\r\n                  adjLinks.push(hiddenAround[i].links[l]);\r\n                }\r\n              }\r\n              if (numLinked > 1) {\r\n                \r\n                if (hiddenAround.length - (numLinked - 1) === node.bombsAround) {\r\n                  \r\n                  for (let m = 0; m < hiddenAround.length; m++) {\r\n                    if (!adjLinks.includes(hiddenAround[m])) {\r\n                      const {row, col} = hiddenAround[m];\r\n                      grid[row][col].risk = 100;\r\n                    } \r\n                  }\r\n                  return;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } \r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Returns flags around\r\nexport function flagsAround(grid, row, col) {\r\n  return (neighbors(grid, row, col).filter(node => node.isFlag));\r\n}\r\n\r\n// Returns hidden squares around\r\nexport function hiddenSquares(grid, row, col) {\r\n  return (neighbors(grid, row, col).filter(node => node.isHidden));\r\n}\r\n\r\n// returns all neighborsw\r\nexport function neighbors(grid, row, col) {\r\n  const neighbors = [];\r\n  const rows = grid.length-1;\r\n  const cols = grid[0].length-1;\r\n  // Top row\r\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row > 0 && col < cols) neighbors.push(grid[row - 1][col + 1]);\r\n  // Middle\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < cols) neighbors.push(grid[row][col + 1]);\r\n  // Bottom row\r\n  if (row < rows && col > 0) neighbors.push(grid[row + 1][col - 1]);\r\n  if (row < rows) neighbors.push(grid[row + 1][col]);\r\n  if (row < rows && col < cols) neighbors.push(grid[row + 1][col + 1]);\r\n\r\n  return neighbors;\r\n}\r\n\r\n// 2d grid to 1d array\r\nexport function gridToArray(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n","\r\nimport {simpleBombUpdate, simpleSafeUpdate, checkLinks,\r\n  gridToArray, complicatedRiskUpdate, hiddenSquares} from './generalFunctions';\r\n\r\n\r\nexport default function AIMove(grid, mineCount, firstClick) {\r\n  // Just guess the first click\r\n  if (firstClick) {\r\n    const row = Math.floor(grid.length / 2)\r\n    const col = Math.floor(grid[0].length / 2)\r\n    return ({row, col, left: true});\r\n  }\r\n  // Converts grid to 1d array\r\n  const arr = gridToArray(grid);\r\n  const hidden = arr.filter(node => node.isHidden && !node.isFlag);\r\n  const toCheck = arr.filter(node => \r\n    !node.isHidden && \r\n    !node.isFlag &&\r\n    node.bombsAround > 0\r\n  );\r\n  // Check links \r\n  checkLinks(grid);\r\n  // Check simple logics\r\n  toCheck.forEach(node => {\r\n    const row = node.row;\r\n    const col = node.col;\r\n    simpleBombUpdate(grid, row, col);\r\n    simpleSafeUpdate(grid, row, col);\r\n  })\r\n  // Safe squares\r\n  const safes = hidden.filter(node => node.risk === 0);\r\n  if (safes.length > 0) return ({row: safes[0].row, col: safes[0].col, left: true});\r\n  // Bombs\r\n  const bombs = hidden.filter(node => node.risk === 100);\r\n  if (bombs.length > 0) return ({row: bombs[0].row, col: bombs[0].col, left: false});\r\n  // If there's no certain bombs or safespaces do guessing\r\n  toCheck.forEach(node => {\r\n    // Do the risk calculation for these nodes\r\n    complicatedRiskUpdate(grid, node.row, node.col);\r\n  })\r\n  // Array of nodes that have their risk calculated\r\n  let rest = hidden.filter(node => node.risk !== null);\r\n  rest = sortByRisk(rest);\r\n  // if theres filtered options\r\n  if (typeof rest[0] !== 'undefined') {\r\n    return ({row: rest[0].row, col: rest[0].col, left: true});\r\n  }\r\n  // Basicly a pure guess \r\n  const lowRisk = toCheck.filter(node => node.bombsAround === 1);\r\n  let ret1 = [];\r\n  lowRisk.forEach(node => {\r\n    ret1 = ret1.concat(hiddenSquares(grid, node.row, node.col).filter(node => !node.isFlag));\r\n  })\r\n  if (ret1.length > 0) {\r\n    return ({row: ret1[0].row, col: ret1[0].col, left: true});\r\n  }\r\n  return ({row: hidden[0].row, col: hidden[0].col, left: true});\r\n}\r\n\r\nfunction sortByRisk(arr) {\r\n  return (arr.sort((a, b) => a.risk - b.risk));\r\n}\r\n","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport AIMove from './AI/main';\r\nimport './Game.css';\r\n\r\nexport default class Grid extends Component {\r\n  _isMounted = false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      grid_width: this.props.width,\r\n      grid_height: this.props.height,\r\n      loading: true,\r\n      firstClick: true,\r\n      mineCount: this.props.mineCount,\r\n      alive: true,\r\n      hasWon: false,\r\n      time: 0,\r\n      aiSpeed: this.props.aiSpeed,\r\n    }\r\n  }\r\n\r\n  // initializes grid after loading\r\n  componentDidMount() {\r\n    const {grid_width, grid_height} = this.state;\r\n    const grid = CreateGrid(grid_width, grid_height);\r\n    this.setState({grid, loading: false});\r\n    this._isMounted = true;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stopTimer();\r\n    this._isMounted = false;\r\n  }\r\n\r\n  // Send data to game component\r\n  sendWinCallback() {\r\n    this.setState({hasWon: true});\r\n    const data = {\r\n      from: 'grid-win',\r\n    };\r\n    this.props.parentCallback(data);\r\n  }\r\n\r\n  sendMineCountCallback(flags) {\r\n    const minesLeft = this.state.mineCount - flags;\r\n    const data = {\r\n      from: 'grid-minecount',\r\n      minesLeft: minesLeft,\r\n    }\r\n    this.props.parentCallback(data);\r\n  }\r\n\r\n  sendLossCallback() {\r\n    const data = {\r\n      from: 'grid-loss',\r\n    }\r\n    this.props.parentCallback(data);\r\n  }\r\n\r\n  // Timer functions\r\n  startTimer() {\r\n    this.timer = setInterval(() => this.setState({\r\n      time: this.state.time + 1\r\n    }), 1000);\r\n  }\r\n\r\n  stopTimer() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  resetTimer() {\r\n    this.setState({time: 0});\r\n  }\r\n\r\n  // Handles left click\r\n  handleOnClick(row, col) {\r\n    const {firstClick, grid, mineCount, alive} = this.state;\r\n    if (!alive) return;\r\n    if (!this._isMounted) return;\r\n    if (firstClick) {\r\n      const newGrid = FirstClick(grid, row, col, mineCount);\r\n      this.resetTimer();\r\n      this.startTimer();\r\n      this.setState({grid: newGrid, firstClick: false});\r\n    } else {\r\n      let newGrid = grid;\r\n      const isAlive = LeftClick(newGrid, row, col);\r\n      if (!isAlive) {\r\n        this.stopTimer();\r\n        this.sendLossCallback();\r\n      }\r\n      this.setState({grid: newGrid, alive: isAlive});\r\n    }\r\n    if (HiddenSquares(grid) === 0) {\r\n      this.sendWinCallback();\r\n      this.stopTimer();\r\n    }\r\n  }\r\n\r\n  // handleRight click\r\n  handleContextMenu = (e, row, col) => {\r\n    if (!this._isMounted) return;\r\n    if (e !== undefined) e.preventDefault();\r\n\r\n    const newGrid = RightClick(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n    const flags = Flags(this.state.grid);\r\n    this.sendMineCountCallback(flags);\r\n  }\r\n\r\n  // Starts the ai\r\n  playAI = () => {\r\n    const {aiSpeed, alive, hasWon} = this.state;\r\n    if (!this._isMounted || !alive || hasWon) return;\r\n    setTimeout(() => {\r\n      const {grid, mineCount, firstClick} = this.state;\r\n      const {row, col, left} = AIMove(grid, mineCount, firstClick);\r\n      if (left) this.handleOnClick(row, col);\r\n      else this.handleContextMenu(undefined, row, col);\r\n      let {alive, hasWon} = this.state;\r\n      if (alive && !hasWon) this.playAI();\r\n    }, aiSpeed);\r\n  }\r\n\r\n  render() {\r\n    const {grid, loading, time, mineCount, hasWon, alive} = this.state;\r\n    if (loading) {\r\n      return (\r\n        'Loading...'\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n      {/* Button to start the AI*/}\r\n      <div className=\"aibtn\">\r\n        <button className=\"newgame\" onClick={() => this.playAI()}>\r\n          Play AI\r\n        </button>\r\n      </div>\r\n      {/* Info to the user */}\r\n      <div className=\"timer\" >\r\n        Mines left: {mineCount - Flags(grid)}<br/> Time: {time}\r\n      </div>\r\n      <div className=\"grid\">\r\n        {/*Renders every node component */}\r\n      {grid.map((row, rowIndex) => {\r\n        return (\r\n          <div key={rowIndex}>\r\n            {row.map((node, nodeIndex) => {\r\n              const {row, col, bombsAround, isHidden, isFlag, isBomb} = node;\r\n              return (\r\n                <Node \r\n                  key={nodeIndex}\r\n                  col={col}\r\n                  row={row}\r\n                  bombsAround={bombsAround}\r\n                  isHidden={isHidden}\r\n                  isBomb={isBomb}\r\n                  isFlag={isFlag}\r\n                  gameWon={hasWon} \r\n                  gameLost={!alive}\r\n                  onContextMenu={(e, row, col) => this.handleContextMenu(e, row, col)}\r\n                  onClick={(row, col) => this.handleOnClick(row, col)}\r\n                ></Node>\r\n              );\r\n            })}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n    </>\r\n    );\r\n  }\r\n}\r\n// Generates bombs\r\nconst FirstClick = (grid, row, col, mineCount) => {\r\n  CreateMines(grid, mineCount, grid[row][col]);\r\n  UpdateMineCount(grid);\r\n  LeftClick(grid, row, col);\r\n  return (grid);\r\n}\r\n\r\n\r\nconst CreateGrid = (width, height) => {\r\n  let grid = []\r\n  for (let row = 0; row < height; row++) {\r\n    const rowArr = []\r\n    for (let col = 0; col < width; col++) {\r\n      rowArr.push(CreateNode(row, col));\r\n    }\r\n    grid.push(rowArr);\r\n  }\r\n  return (grid);\r\n};\r\n\r\nconst CreateNode = (row, col) => {\r\n  return ({\r\n    row,\r\n    col,\r\n    bombsAround: 0,\r\n    isHidden: true,\r\n    isBomb: false,\r\n    isFlag: false,\r\n    isClear: false,\r\n    linked: false,\r\n    risk: null,\r\n    links: [],\r\n  })\r\n};\r\n\r\n// toggles flags\r\nconst RightClick = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (!node.isHidden) return grid;\r\n  const value = !node.isFlag;\r\n  const newNode = {\r\n    ...node,\r\n    isFlag: value,\r\n  }\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}\r\n\r\nconst LeftClick = (grid, row, col) => {\r\n  const node = grid[row][col];\r\n  if (node.isFlag) {\r\n    return true;\r\n  }\r\n  if (node.isBomb) {\r\n    BombFound(grid, row, col);\r\n    return false;\r\n  } else if (node.bombsAround !== 0 || !node.isHidden) {\r\n    ClearSquare(grid, row, col);\r\n  } else {\r\n    ClearSquare(grid, row, col);\r\n    let neighbors = getNeighbors(grid, row, col);\r\n    neighbors = neighbors.filter(node => node.isHidden && !node.isFlag);\r\n    neighbors.forEach(node => {\r\n      LeftClick(grid, node.row, node.col);\r\n    });\r\n  }\r\n  return true;\r\n}\r\n\r\nconst BombFound = (grid, row, col) => {\r\n  const node = grid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isHidden: false,\r\n  }\r\n  grid[row][col] = newNode;\r\n}\r\n\r\nconst ClearSquare = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isHidden: false,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}\r\n\r\nconst getNewGridWithMine = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isBomb: true,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}\r\n\r\nconst isMine = (grid, row, col) => {\r\n  return (grid[row][col].isBomb);\r\n}\r\n\r\nconst CreateMines = (grid, mineCount, startNode) => {\r\n  let newGrid = grid;\r\n  let minesPut = 0;\r\n  let safeSpace = 2;\r\n  if (grid.length * grid[0].length - 9 < mineCount) safeSpace = 1;\r\n  while (minesPut < mineCount) { // inserts all mines\r\n    const pos = RandomPos(grid.length, grid[0].length);\r\n    if (isMine(newGrid, pos.row, pos.col)) continue;\r\n    if (Math.abs(startNode.row - pos.row) < safeSpace && Math.abs(startNode.col - pos.col) < safeSpace) continue;\r\n    newGrid = getNewGridWithMine(newGrid, pos.row, pos.col);\r\n    minesPut++;\r\n  }\r\n  return newGrid;\r\n}\r\n\r\nconst RandomPos = (rows, cols) => {\r\n  return ({\r\n    row: Math.floor(Math.random() * rows),\r\n    col: Math.floor(Math.random() * cols),\r\n  })\r\n}\r\n\r\nconst UpdateMineCount = (grid) => {\r\n  grid.forEach(row => {\r\n    row.forEach(node => {\r\n      node.bombsAround = CountNeighbors(grid, node.row, node.col);\r\n    })\r\n  });\r\n}\r\n\r\nconst Flags = (grid) => {\r\n  let count = 0;\r\n  grid.forEach(row => {\r\n    row.forEach(node => {\r\n      if (node.isFlag) count++;\r\n    })\r\n  })\r\n  return count;\r\n}\r\n\r\n// returns mines around\r\nconst CountNeighbors = (grid, row, col) => {\r\n  return getNeighbors(grid, row, col).filter(node => node.isBomb).length;\r\n}\r\n\r\nconst getNeighbors = (grid, row, col) => {\r\n  const neighbors = [];\r\n  const rows = grid.length-1;\r\n  const cols = grid[0].length-1;\r\n  // Top row\r\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row > 0 && col < cols) neighbors.push(grid[row - 1][col + 1]);\r\n  // Middle\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < cols) neighbors.push(grid[row][col + 1]);\r\n  // Bottom row\r\n  if (row < rows && col > 0) neighbors.push(grid[row + 1][col - 1]);\r\n  if (row < rows) neighbors.push(grid[row + 1][col]);\r\n  if (row < rows && col < cols) neighbors.push(grid[row + 1][col + 1]);\r\n\r\n  return neighbors;\r\n}\r\n\r\nconst HiddenSquares = (grid) => {\r\n  let count = 0;\r\n  for (let row = 0; row < grid.length; row++) {\r\n    for (let col = 0; col < grid[0].length; col++) {\r\n      if (grid[row][col].isHidden && !grid[row][col].isBomb) {\r\n        count++;\r\n      }\r\n    }\r\n  }\r\n  return count;\r\n}","import React, {Component} from 'react';\r\nimport Grid from './Grid';\r\n\r\nexport default class Game extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      width: 9,\r\n      height: 9,\r\n      mineCount: 10,\r\n      key: 0,\r\n      hasWon: false,\r\n      hasLost: false,\r\n      option: \"beginner\",\r\n      minesLeft: 0,\r\n      customData: [],\r\n      aiSpeed: 500,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // set data after loading\r\n    const {mineCount} = this.state;\r\n    const customData = [9, 9, 10];\r\n    this.setState({loading: false, minesLeft: mineCount, customData: customData});\r\n  }\r\n\r\n  // Called when receiving data from grid\r\n  Callback = (data) => {\r\n    const {from} = data;\r\n    if (from === 'grid-win') {\r\n      this.setState({hasWon: true});\r\n    } else if (from === 'grid-minecount') {\r\n      const {minesLeft} = data;\r\n      this.setState({minesLeft: minesLeft});\r\n    } else if (from === 'grid-loss') {\r\n      this.setState({hasLost: true});\r\n    }\r\n  }\r\n\r\n  // Handles the gamemode selection\r\n  handleOptionChange = (e) => {\r\n    this.setState({option: e.target.value});\r\n  }\r\n\r\n  // inserts the data from the custom game options\r\n  handleCustomGame = (e, index) => {\r\n    const {customData} = this.state;\r\n    const newData = customData;\r\n    newData[index] = parseInt(e.target.value);\r\n    this.setState({customData: newData});\r\n  }\r\n\r\n  // Handler for changing the AI speed\r\n  changeAISpeed = (e) => {\r\n    e.preventDefault();\r\n    this.setState({aiSpeed: 1000 - e.target.value});\r\n    this.Restart();\r\n  }\r\n\r\n  // When new game is created\r\n  handleNewGame = (e) => {\r\n    e.preventDefault();\r\n    const {option, customData} = this.state;\r\n    if (option === \"beginner\") {\r\n      this.setState({width: 9, height: 9, mineCount: 10, minesLeft: this.state.mineCount});\r\n    } else if (option === \"intermediate\") {\r\n      this.setState({width: 16, height: 16, mineCount:40, minesLeft: this.state.mineCount});\r\n    } else if (option === \"expert\") {\r\n      this.setState({width: 30, height: 16, mineCount: 99, minesLeft: this.state.mineCount});\r\n    } else if (option === \"custom\") {\r\n      if (customData.every(atr => !isNaN(atr))) {\r\n        const bombs = this.Verifybomb(customData);\r\n        this.setState({width: customData[0], height: customData[1], mineCount: bombs, minesLeft: this.state.mineCount});\r\n      } else return;\r\n    }\r\n    this.Restart();\r\n  }\r\n\r\n  // Will verify that its possible to make this grid\r\n  Verifybomb(data) {\r\n    if (data[0] * data[1] < 2) return (0);\r\n    if (data[0] * data[1] - 1 >= data[2]) {\r\n      return (data[2]);\r\n    } else {\r\n      return (data[0] * data[1] - 1);\r\n    }\r\n  }\r\n\r\n  // reset the game\r\n  Restart = () => {\r\n    let {key} = this.state;\r\n    key++;\r\n    this.setState({key: key, hasWon: false, hasLost: false, minesLeft: this.state.mineCount})\r\n  }\r\n\r\n  // Handles styles for the gamemodes\r\n  ButtonClassName(value) {\r\n    const {option} = this.state;\r\n    if (option === value) {\r\n      return (\"regularbtn checked\");\r\n    } else {\r\n      return (\"regularbtn\");\r\n    }\r\n  }\r\n\r\n  // text if game has been won\r\n  winText() {\r\n    if (this.state.hasWon)\r\n      return 'You Win!';\r\n  }\r\n\r\n  // text if game has been lost\r\n  LossText() {\r\n    if (this.state.hasLost) \r\n      return 'You Lost!';\r\n  }\r\n  \r\n  render() {\r\n    const {key, loading, option, width, height, mineCount, aiSpeed} = this.state;\r\n    if (loading) {\r\n      return ('Loading...');\r\n    }\r\n    return (\r\n      <>\r\n      {/* all IO*/ }\r\n      \r\n      <div className=\"IO\">\r\n        <form onSubmit={this.handleNewGame}>\r\n          <div className=\"buttons\">\r\n            {/**gamemode selector */}\r\n            <label className={this.ButtonClassName(\"custom\")}>\r\n              <input type=\"radio\" value=\"custom\" checked={option === \"custom\"} onChange={this.handleOptionChange}/>\r\n              Custom\r\n            </label>\r\n            <label className={this.ButtonClassName(\"beginner\")}> Beginner\r\n              <input type=\"radio\" value=\"beginner\" checked={option === \"beginner\"} onChange={this.handleOptionChange}/>\r\n            </label>\r\n            <label className={this.ButtonClassName(\"intermediate\")}> Intermediate\r\n              <input type=\"radio\" value=\"intermediate\" checked={option === \"intermediate\"} onChange={this.handleOptionChange}/>\r\n            </label>\r\n            <label className={this.ButtonClassName(\"expert\")}>\r\n              <input type=\"radio\" value=\"expert\" checked={option === \"expert\"} onChange={this.handleOptionChange}/>\r\n              Expert&nbsp;<br/>\r\n            </label>\r\n          </div>\r\n          {/**custom input form */}\r\n          <div className=\"regularbtn buttons\">\r\n            <label>\r\n              Width:&nbsp;&nbsp;\r\n              <input className=\"custom-input\" type=\"number\" name=\"width\" \r\n                autoComplete=\"off\" min={1} max={50} onChange={(e) => this.handleCustomGame(e, 0)}/>\r\n            </label>\r\n            <label>\r\n              <br/>Height:&nbsp;\r\n              <input className=\"custom-input\" type=\"number\" name=\"height\" \r\n                autoComplete=\"off\" min={1} max={50} onChange={(e) => this.handleCustomGame(e, 1)}/>\r\n            </label>\r\n            <label> \r\n              <br/>Bombs:\r\n              <input className=\"custom-input\" type=\"number\" name=\"bombs\" \r\n                autoComplete=\"off\" min={0} max={1000} onChange={(e) => this.handleCustomGame(e, 2)}/>\r\n            </label>\r\n          </div>\r\n          <button className=\"button\" onClick={this.Restart}>\r\n            Restart\r\n          </button>\r\n          <button className=\"newgame\" type=\"submit\">\r\n            New Game\r\n          </button>\r\n          <div className=\"ai\">\r\n            AI speed<br/>\r\n            <input className=\"slider\" type=\"range\" name=\"points\" min=\"10\" max=\"990\" step=\"10\" \r\n              defaultValue=\"500\" onChange={this.changeAISpeed}></input>\r\n          </div>\r\n          \r\n        </form>\r\n      </div>\r\n      {/**extra text for certain gamestates */}\r\n      <div className=\"win\">\r\n        {this.winText()}\r\n      </div>\r\n      <div className=\"loss\">\r\n        {this.LossText()}\r\n      </div>\r\n      {/**Renders the grid */}\r\n        <div key={key}>\r\n          <Grid\r\n            onContextMenu={this.handleClick}\r\n            parentCallback = {this.Callback}\r\n            width={width}\r\n            height={height}\r\n            mineCount={mineCount}\r\n            aiSpeed={aiSpeed}\r\n          ></Grid>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import Game from './MineSweeper/Game';\nimport React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister(); \n"],"sourceRoot":""}